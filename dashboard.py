#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import dash
from dash import dcc, html, Input, Output, callback
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from dash_bootstrap_components import themes
import dash_bootstrap_components as dbc

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    trade_df = pd.read_csv('trade.csv')
    countries_df = pd.read_csv('countries.csv')
    commodities_df = pd.read_csv('commodities.csv')
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    trade_df = trade_df.rename(columns={
        'period': 'year',
        'reporterCode': 'reporterCode',
        'flowCode': 'flow',
        'partnerCode': 'partnerCode',
        'cmdCode': 'commodityCode',
        'primaryValue': 'value'
    })
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω
    country_mapping = dict(zip(countries_df['id'], countries_df['text']))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    trade_df['partnerName'] = trade_df['partnerCode'].map(country_mapping)
    trade_df['partnerName'] = trade_df['partnerName'].fillna('–ü—Ä–æ—á–∏–µ —Ä–µ–≥–∏–æ–Ω—ã')
    
    # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    trade_df = trade_df[trade_df['partnerName'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    trade_df.loc[trade_df['partnerCode'] == 842, 'partnerName'] = '–°–®–ê'
    trade_df.loc[trade_df['partnerCode'] == 579, 'partnerName'] = '–ù–æ—Ä–≤–µ–≥–∏—è'
    
    return trade_df, countries_df, commodities_df

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
def format_number(value):
    if pd.isna(value) or value == 0:
        return "0"
    
    if abs(value) >= 1e9:
        return f"{value/1e9:.1f}B"
    elif abs(value) >= 1e6:
        return f"{value/1e6:.1f}M"
    elif abs(value) >= 1e3:
        return f"{value/1e3:.1f}K"
    else:
        return f"{value:.0f}"

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è tooltip
def format_tooltip(value):
    if pd.isna(value) or value == 0:
        return "0 –º–ª–Ω USD"
    
    if abs(value) >= 1e9:
        return f"{value/1e9:.1f}B –º–ª–Ω USD"
    elif abs(value) >= 1e6:
        return f"{value/1e6:.1f}M –º–ª–Ω USD"
    elif abs(value) >= 1e3:
        return f"{value/1e3:.1f}K –º–ª–Ω USD"
    else:
        return f"{value:.0f} –º–ª–Ω USD"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
trade_df, countries_df, commodities_df = load_data()

# –°–æ–∑–¥–∞–µ–º Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SANDSTONE, "/assets/custom.css"])
server = app.server

# –ú–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.layout = dbc.Container([
    dcc.Location(id='url', refresh=False),
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    dbc.Row([
        dbc.Col([
            html.H1("üá´üáÆ –î–∞—à–±–æ—Ä–¥ –≤–Ω–µ—à–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –§–∏–Ω–ª—è–Ω–¥–∏–∏", 
                   className="text-center mb-4"),
            html.Hr()
        ])
    ]),
    
    # KPI –∫–∞—Ä—Ç–æ—á–∫–∏
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4("–û–±—â–∏–π —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç", className="card-title"),
                    html.H2(id="total-trade", className="text-primary")
                ])
            ])
        ], width=3),
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4("–¢–æ—Ä–≥–æ–≤–æ–µ —Å–∞–ª—å–¥–æ 2023", className="card-title"),
                    html.H2(id="trade-balance", className="text-success")
                ])
            ])
        ], width=3),
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4("–¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä", className="card-title"),
                    html.H2(id="top-partner", className="text-info")
                ])
            ])
        ], width=3),
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4("–ü–µ—Ä–∏–æ–¥", className="card-title"),
                    html.H2("2000-2023", className="text-warning")
                ])
            ])
        ], width=3)
    ], className="mb-4"),
    
    # –í–∫–ª–∞–¥–∫–∏
    dbc.Tabs([
        # –í–∫–ª–∞–¥–∫–∞ 1: –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="yearly-trend")
                ])
            ])
        ], label="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º"),
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –¢–û–ü-10 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.RadioItems(
                        id="commodity-type",
                        options=[
                            {"label": "–≠–∫—Å–ø–æ—Ä—Ç", "value": "E"},
                            {"label": "–ò–º–ø–æ—Ä—Ç", "value": "I"}
                        ],
                        value="E",
                        inline=True,
                        className="mb-3"
                    ),
                    dcc.Graph(id="top-commodities")
                ])
            ])
        ], label="–¢–û–ü-10 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø"),
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="sector-structure")
                ])
            ])
        ], label="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"),
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="geography-map")
                ])
            ])
        ], label="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"),
        
        # –í–∫–ª–∞–¥–∫–∞ 5: –¢–û–ü-10 —Å—Ç—Ä–∞–Ω-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="top-partners")
                ])
            ])
        ], label="–¢–û–ü-10 —Å—Ç—Ä–∞–Ω-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"),
        
        # –í–∫–ª–∞–¥–∫–∞ 6: –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="russia-analysis")
                ])
            ])
        ], label="–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"),
        
        # –í–∫–ª–∞–¥–∫–∞ 7: –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        dbc.Tab([
            dbc.Row([
                dbc.Col([
                    dcc.Graph(id="structure-changes")
                ])
            ])
        ], label="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    ])
], fluid=True)

# Callback –¥–ª—è KPI –∫–∞—Ä—Ç–æ—á–µ–∫
@app.callback(
    [Output("total-trade", "children"),
     Output("trade-balance", "children"),
     Output("top-partner", "children")],
    [Input("url", "pathname")]
)
def update_kpi(pathname):
    # –û–±—â–∏–π —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç
    total_trade = trade_df['value'].sum()
    
    # –¢–æ—Ä–≥–æ–≤–æ–µ —Å–∞–ª—å–¥–æ 2023
    recent_data = trade_df[trade_df['year'] == 2023]
    if not recent_data.empty:
        exports = recent_data[recent_data['flow'] == 'E']['value'].sum()
        imports = recent_data[recent_data['flow'] == 'I']['value'].sum()
        balance = exports - imports
        balance_text = f"{format_number(balance)}"
        if balance > 0:
            balance_text = f"+{balance_text} üìà"
        else:
            balance_text = f"{balance_text} üìâ"
    else:
        balance_text = "N/A"
    
    # –¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä
    partner_totals = trade_df.groupby('partnerName')['value'].sum().sort_values(ascending=False)
    top_partner = partner_totals.index[0] if not partner_totals.empty else "N/A"
    
    return f"{format_number(total_trade)} –º–ª–Ω USD", balance_text, top_partner

# Callback –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –≥–æ–¥–∞–º
@app.callback(
    Output("yearly-trend", "figure"),
    [Input("url", "pathname")]
)
def update_yearly_trend(pathname):
    yearly_data = trade_df.groupby(['year', 'flow'])['value'].sum().reset_index()
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    flow_mapping = {'E': '–≠–∫—Å–ø–æ—Ä—Ç', 'I': '–ò–º–ø–æ—Ä—Ç'}
    yearly_data['flow'] = yearly_data['flow'].map(flow_mapping)
    
    fig = px.line(yearly_data, x='year', y='value', color='flow',
                  title="–î–∏–Ω–∞–º–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –≥–æ–¥–∞–º",
                  labels={'value': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª–Ω USD)', 'year': '–ì–æ–¥', 'flow': '–¢–∏–ø –ø–æ—Ç–æ–∫–∞'})
    
    fig.update_traces(hovertemplate='%{y:,.0f} –º–ª–Ω USD<extra></extra>')
    fig.update_layout(template="plotly_white")
    
    return fig

# Callback –¥–ª—è –¢–û–ü-10 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø
@app.callback(
    Output("top-commodities", "figure"),
    [Input("commodity-type", "value")]
)
def update_top_commodities(commodity_type):
    commodity_data = trade_df[trade_df['flow'] == commodity_type].groupby('commodityCode')['value'].sum().reset_index()
    commodity_data = commodity_data.merge(commodities_df, left_on='commodityCode', right_on='id', how='left')
    commodity_data = commodity_data.nlargest(10, 'value')
    
    # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
    commodity_data['short_name'] = commodity_data['text'].apply(
        lambda x: x[:30] + '...' if len(str(x)) > 30 else str(x)
    )
    
    flow_name = "–≠–∫—Å–ø–æ—Ä—Ç" if commodity_type == "E" else "–ò–º–ø–æ—Ä—Ç"
    
    fig = px.bar(commodity_data, x='value', y='short_name', orientation='h',
                 title=f"–¢–û–ü-10 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø ({flow_name})",
                 labels={'value': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª–Ω USD)', 'short_name': '–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞'})
    
    fig.update_traces(hovertemplate='%{y}<br>%{x:,.0f} –º–ª–Ω USD<extra></extra>')
    fig.update_layout(template="plotly_white")
    
    return fig

# Callback –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
@app.callback(
    Output("sector-structure", "figure"),
    [Input("url", "pathname")]
)
def update_sector_structure(pathname):
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤—ã–º —Ü–∏—Ñ—Ä–∞–º –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ (—Å–µ–∫—Ç–æ—Ä–∞)
    trade_df['sector'] = trade_df['commodityCode'].astype(str).str[:2]
    sector_data = trade_df.groupby('sector')['value'].sum().reset_index()
    sector_data = sector_data.nlargest(10, 'value')
    
    fig = px.pie(sector_data, values='value', names='sector',
                 title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º")
    
    fig.update_traces(hovertemplate='–°–µ–∫—Ç–æ—Ä %{label}<br>%{value:,.0f} –º–ª–Ω USD (%{percent:.1%})<extra></extra>')
    fig.update_layout(template="plotly_white")
    
    return fig

# Callback –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
@app.callback(
    Output("geography-map", "figure"),
    [Input("url", "pathname")]
)
def update_geography_map(pathname):
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    geography_data = trade_df.groupby('partnerName')['value'].sum().reset_index()
    geography_data = geography_data.nlargest(15, 'value')
    
    fig = px.bar(geography_data, x='value', y='partnerName', orientation='h',
                 title="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¢–û–ü-15 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)",
                 labels={'value': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª–Ω USD)', 'partnerName': '–°—Ç—Ä–∞–Ω–∞/–†–µ–≥–∏–æ–Ω'})
    
    fig.update_traces(hovertemplate='%{y}<br>%{x:,.0f} –º–ª–Ω USD<extra></extra>')
    fig.update_layout(template="plotly_white")
    
    return fig

# Callback –¥–ª—è –¢–û–ü-10 —Å—Ç—Ä–∞–Ω-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
@app.callback(
    Output("top-partners", "figure"),
    [Input("url", "pathname")]
)
def update_top_partners(pathname):
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 2019-2023
    recent_years = [2019, 2020, 2021, 2022, 2023]
    recent_data = trade_df[trade_df['year'].isin(recent_years)]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –∏ —Ç–∏–ø–∞–º –ø–æ—Ç–æ–∫–æ–≤
    partner_data = recent_data.groupby(['partnerName', 'flow'])['value'].sum().reset_index()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    pivot_data = partner_data.pivot(index='partnerName', columns='flow', values='value').fillna(0)
    pivot_data['total'] = pivot_data['E'] + pivot_data['I']
    pivot_data['balance'] = pivot_data['E'] - pivot_data['I']
    
    # –¢–æ–ø-10 –ø–æ –æ–±—â–µ–º—É –æ–±—ä–µ–º—É
    top_partners = pivot_data.nlargest(10, 'total').reset_index()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
    fig.add_trace(go.Bar(
        name='–≠–∫—Å–ø–æ—Ä—Ç',
        x=top_partners['partnerName'],
        y=top_partners['E'],
        marker_color='lightblue'
    ))
    
    fig.add_trace(go.Bar(
        name='–ò–º–ø–æ—Ä—Ç',
        x=top_partners['partnerName'],
        y=top_partners['I'],
        marker_color='lightcoral'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Å–∞–ª—å–¥–æ
    colors = ['green' if x > 0 else 'red' for x in top_partners['balance']]
    fig.add_trace(go.Scatter(
        name='–°–∞–ª—å–¥–æ',
        x=top_partners['partnerName'],
        y=top_partners['balance'],
        mode='markers+lines',
        marker=dict(color=colors, size=10),
        line=dict(color='yellow', width=2)
    ))
    
    fig.update_layout(
        title="–¢–û–ü-10 —Å—Ç—Ä–∞–Ω-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (2019-2023)",
        barmode='group',
        template="plotly_white",
        xaxis_title="–°—Ç—Ä–∞–Ω–∞",
        yaxis_title="–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª–Ω USD)"
    )
    
    fig.update_traces(hovertemplate='%{y:,.0f} –º–ª–Ω USD<extra></extra>')
    
    return fig

# Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –†–æ—Å—Å–∏–∏
@app.callback(
    Output("russia-analysis", "figure"),
    [Input("url", "pathname")]
)
def update_russia_analysis(pathname):
    # –î–∞–Ω–Ω—ã–µ –ø–æ –†–æ—Å—Å–∏–∏
    russia_data = trade_df[trade_df['partnerName'] == '–†–æ—Å—Å–∏—è'].groupby(['year', 'flow'])['value'].sum().reset_index()
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
    flow_mapping = {'E': '–≠–∫—Å–ø–æ—Ä—Ç', 'I': '–ò–º–ø–æ—Ä—Ç'}
    russia_data['flow'] = russia_data['flow'].map(flow_mapping)
    
    fig = px.line(russia_data, x='year', y='value', color='flow',
                  title="–¢–æ—Ä–≥–æ–≤–ª—è —Å –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–µ–π",
                  labels={'value': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª–Ω USD)', 'year': '–ì–æ–¥', 'flow': '–¢–∏–ø –ø–æ—Ç–æ–∫–∞'})
    
    fig.update_traces(hovertemplate='%{y:,.0f} –º–ª–Ω USD<extra></extra>')
    fig.update_layout(template="plotly_white")
    
    return fig

# Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
@app.callback(
    Output("structure-changes", "figure"),
    [Input("url", "pathname")]
)
def update_structure_changes(pathname):
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º 2013 –∏ 2023 –≥–æ–¥—ã
    years = [2013, 2023]
    structure_data = trade_df[trade_df['year'].isin(years)]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    commodity_changes = structure_data.groupby(['year', 'commodityCode'])['value'].sum().reset_index()
    commodity_changes = commodity_changes.merge(commodities_df, left_on='commodityCode', right_on='id', how='left')
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    pivot_changes = commodity_changes.pivot(index='text', columns='year', values='value').fillna(0)
    pivot_changes['change'] = ((pivot_changes[2023] - pivot_changes[2013]) / pivot_changes[2013] * 100)
    
    # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ 0 (–≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 0)
    pivot_changes.replace([np.inf, -np.inf], 0, inplace=True)
    pivot_changes.fillna(0, inplace=True)

    # –¢–æ–ø-10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
    top_changes = pivot_changes.nlargest(10, 'change').reset_index()
    
    # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    top_changes['short_name'] = top_changes['text'].apply(
        lambda x: x[:30] + '...' if len(str(x)) > 30 else str(x)
    )
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    colors = ['green' if x > 0 else 'red' for x in top_changes['change']]
    
    fig.add_trace(go.Bar(
        x=top_changes['short_name'],
        y=top_changes['change'],
        marker_color=colors,
        text=[f"{x:+.1f} –ø.–ø." for x in top_changes['change']],
        textposition='auto'
    ))
    
    fig.update_layout(
        title="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (2013-2023)",
        template="plotly_white",
        xaxis_title="–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞",
        yaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∏ (% –ø.–ø.)"
    )
    
    fig.update_traces(hovertemplate='%{x}<br>%{y:+.1f} –ø.–ø.<extra></extra>')
    
    return fig

if __name__ == '__main__':
    app.run(debug=True, port=8050, host='0.0.0.0') 